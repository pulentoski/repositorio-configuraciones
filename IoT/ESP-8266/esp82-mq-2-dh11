#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <DHT.h>

// Configuraci√≥n del DHT11
#define DHTPIN D4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Configuraci√≥n del MQ-2
const int MQ2_A0_PIN = A0;  // Pin anal√≥gico
const int MQ2_D0_PIN = D3;   // Pin digital (opcional para alerta)

// WiFi
const char* ssid = "IOT SUB-ESTACION";
const char* password = "12345678";
bool wifiConnected = false;

// Servidor web
ESP8266WebServer server(80);

// Variables de los sensores
int gasValue = 0;
bool gasAlert = false;

void setup() {
  Serial.begin(115200);
  dht.begin();
  pinMode(MQ2_A0_PIN, INPUT);
  pinMode(MQ2_D0_PIN, INPUT);

  // Conexi√≥n WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
    delay(500);
    Serial.print(".");
  }
  wifiConnected = (WiFi.status() == WL_CONNECTED);
  
  if (wifiConnected) {
    Serial.println("\nConectado! IP: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nAdvertencia: Sin conexi√≥n WiFi");
  }

  // Rutas del servidor web
  server.on("/", handleRoot);
  server.begin();
  Serial.println("Servidor web iniciado");
}

void loop() {
  server.handleClient();
  delay(2000);
}

// P√°gina web optimizada
void handleRoot() {
  if (!wifiConnected) {
    server.send(200, "text/plain", "Conecta el WiFi para acceder.");
    return;
  }

  float h = dht.readHumidity();
  float t = dht.readTemperature();
  gasValue = analogRead(MQ2_A0_PIN);
  gasAlert = digitalRead(MQ2_D0_PIN);

  String html = F(
    "<!DOCTYPE html><html><head>"
    "<meta charset=UTF-8><meta name=viewport content='width=device-width,initial-scale=1'>"
    "<title>Monitor IoT</title>"
    "<style>"
    "body{font-family:sans-serif;margin:0;padding:0;background:#f5f7fa;color:#34495e;}"
    ".header{background:linear-gradient(135deg,#2c3e50,#3498db);color:#fff;padding:1rem;text-align:center;}"
    ".cards{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:1rem;padding:1rem;}"
    ".card{background:#fff;border-radius:8px;padding:1rem;box-shadow:0 2px 5px rgba(0,0,0,0.1);}"
    ".card h2{font-size:1rem;color:#2c3e50;margin-top:0;}"
    ".value{font-size:2rem;font-weight:bold;text-align:center;margin:1rem 0;}"
    ".alert{color:#e74c3c;animation:pulse 1.5s infinite;}"
    "@keyframes pulse{0%{opacity:1;}50%{opacity:0.5;}100%{opacity:1;}}"
    "</style></head>"
    "<body>"
    "<div class=header><h1>Monitor IoT</h1><p>NodeMCU ESP8266</p></div>"
    "<div class=cards>"
    "<div class=card><h2>üå°Ô∏è Temperatura</h2><div class=value>"
  );
  html += t;
  html += F("<span style=font-size:0.8rem> ¬∞C</span></div></div>"
    "<div class=card><h2>üíß Humedad</h2><div class=value>");
  html += h;
  html += F("<span style=font-size:0.8rem> %</span></div></div>"
    "<div class=card><h2>‚ö†Ô∏è Gas (A0)</h2><div class=value>");
  html += gasValue;
  html += F("</div></div>"
    "<div class=card><h2>");
  html += (gasAlert ? "üö® ALERTA" : "‚úÖ Normal");
  html += F("</h2><div class='value ");
  html += (gasAlert ? "alert" : "");
  html += F("'>");
  html += (gasAlert ? "PELIGRO!" : "Seguro");
  html += F("</div></div>"
    "</div></body></html>"
  );

  server.send(200, "text/html", html);
}
