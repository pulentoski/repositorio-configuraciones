#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Configuración WiFi
const char* ssid = "IOT SUB-ESTACION";
const char* password = "12345678";
ESP8266WebServer server(80);

// Pines (ajusta según tu conexión física)
const int trigPin = 5;     // D1
const int echoPin = 4;     // D2
const int relayPin = 0;    // D3
const int redLedPin = 14;  // D5
const int whiteLedPin = 12;// D6

// Variables
int safeDistance = 50;     // Distancia umbral en cm
int distance = 0;
bool systemActive = true;  // Para control manual

void setup() {
  Serial.begin(115200);
  
  // Configura pines
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);
  pinMode(whiteLedPin, OUTPUT);
  digitalWrite(relayPin, LOW);
  digitalWrite(whiteLedPin, HIGH);

  // Conexión WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado! IP: " + WiFi.localIP().toString());

  // Rutas del servidor web
  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/toggle", HTTP_POST, handleToggle);
  server.begin();
  Serial.println("Servidor web iniciado");
}

void loop() {
  server.handleClient();
  medirDistancia();
  controlarSalidas();
  delay(500);
}

void medirDistancia() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;
  Serial.println("Distancia: " + String(distance) + " cm");
}

void controlarSalidas() {
  if (!systemActive) {
    digitalWrite(relayPin, LOW);
    digitalWrite(redLedPin, LOW);
    digitalWrite(whiteLedPin, LOW);
    return;
  }

  if (distance <= safeDistance && distance > 0) {
    digitalWrite(relayPin, HIGH);
    digitalWrite(redLedPin, HIGH);
    digitalWrite(whiteLedPin, LOW);
  } else {
    digitalWrite(relayPin, LOW);
    digitalWrite(redLedPin, LOW);
    digitalWrite(whiteLedPin, HIGH);
  }
}

// Página web principal
void handleRoot() {
  String html = F(
    "<!DOCTYPE html><html><head>"
    "<meta charset=UTF-8><meta name=viewport content='width=device-width,initial-scale=1'>"
    "<title>Control Ultrasónico</title>"
    "<style>"
    "body{font-family:Arial,sans-serif;background:#f5f7fa;margin:0;padding:20px;}"
    ".card{background:#fff;border-radius:10px;padding:20px;margin-bottom:20px;box-shadow:0 2px 5px rgba(0,0,0,0.1);}"
    ".btn{display:inline-block;padding:10px 20px;background:#3498db;color:#fff;border:none;border-radius:5px;cursor:pointer;text-decoration:none;}"
    ".btn-danger{background:#e74c3c;}"
    ".value{font-size:2em;font-weight:bold;margin:10px 0;}"
    "</style>"
    "<script>"
    "function updateData(){"
    "  fetch('/data').then(r=>r.json()).then(data=>{"
    "    document.getElementById('distance').innerText=data.distance+' cm';"
    "    document.getElementById('status').innerText=data.status;"
    "    document.getElementById('status').style.color=data.alert?'#e74c3c':'#2ecc71';"
    "    document.getElementById('systemStatus').innerText=data.systemActive?'ACTIVADO':'DESACTIVADO';"
    "  });"
    "}"
    "setInterval(updateData,1000);"
    "updateData();"
    "</script>"
    "</head><body>"
    "<div class=card><h1>Control Ultrasónico</h1></div>"
    "<div class=card>"
    "<h2>📏 Distancia</h2><div class=value id=distance>--</div>"
    "<h2>🔄 Estado</h2><div id=status style='font-size:1.5em'>--</div>"
    "</div>"
    "<div class=card>"
    "<h2>⚙️ Control del Sistema</h2>"
    "<p>Estado actual: <strong id=systemStatus>--</strong></p>"
    "<a href='/toggle?action=activate' class=btn>ACTIVAR</a> "
    "<a href='/toggle?action=deactivate' class='btn btn-danger'>DESACTIVAR</a>"
    "</div>"
    "</body></html>"
  );
  server.send(200, "text/html", html);
}

// Datos en JSON para AJAX
void handleData() {
  String status = (distance <= safeDistance && distance > 0) ? "OBJETO DETECTADO 🔴" : "ZONA DESPEJADA 🟢";
  bool alert = (distance <= safeDistance && distance > 0);
  
  String json = "{";
  json += "\"distance\":" + String(distance) + ",";
  json += "\"status\":\"" + status + "\",";
  json += "\"alert\":" + String(alert ? "true" : "false") + ",";
  json += "\"systemActive\":" + String(systemActive ? "true" : "false");
  json += "}";
  server.send(200, "application/json", json);
}

// Control manual del sistema
void handleToggle() {
  if (server.arg("action") == "activate") {
    systemActive = true;
    digitalWrite(whiteLedPin, HIGH);
  } else if (server.arg("action") == "deactivate") {
    systemActive = false;
    digitalWrite(whiteLedPin, LOW);
  }
  server.sendHeader("Location", "/");
  server.send(303);
}
